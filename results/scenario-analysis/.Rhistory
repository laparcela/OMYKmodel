print("Hola Qué tal")
knitr::opts_chunk$set(echo = TRUE)
plot(pressure)
summary(cars)
knitr::opts_chunk$set(echo = TRUE)
dir() #Para ver lo que tengo en el directorio de trabajo
q()
islas <- 1:33                                # identificador de las 33 islas
sp1 <-c(rep(1,6), rep(0,27))                 # vector de incidencia de M. nigrirostris
sp2 <- c(rep(0,6), rep(1,14), rep(0,13))     # vector de incidencia de M. mackinlayi
PAM <- matrix(data = c(sp1, sp2), nrow=2, ncol=33, byrow=TRUE)
PAM
data.frame(PAM)                              # para desplegar la PAM
#### Tabla de contingencia
table(sp1, sp2)
#### Prueba de xi cuadrada
chisq.test(sp1, sp2, correct=FALSE)                # sin correcci?n por continuidad
chisq.test(sp1, sp2, correct=TRUE)                 # con correcci?n de Yates
#### Prueba exacta de Fisher
fisher.test(sp1, sp2, alternative = "less")        # prueba exacta de Fisher
####  El n?mero de coocurrencias se puede calcular multiplicando los vectores de incidencia
as.integer(t(sp1)%*%sp2)                           #
#### un vector aleatorios
sp1.aleatorio <- sample(sp1, size = length(sp1), replace=FALSE)  # comando completo
#### dos vectores aleatorios con los defaults y n?mero de coocurrencias:
sp1.aleatorio <- sample(sp1)
sp2.aleatorio <- sample(sp2)
(coexistencia <- as.integer(t(sp1.aleatorio)%*%sp2.aleatorio))
#####  Repetir la aleatorizaci?n
#####  con un bucle
iteraciones = 100
ocurrencias <- rep(NA, 100)
for(i in 1:iteraciones){
ocurrencias[i] = as.integer(t(sample(sp1))%*%sample(sp2))
}
##### En una sola l?nea de comando
ocurrencias <- replicate(n=100,as.integer(t(sample(sp1))%*%sample(sp2)) )
####  Repetir cien mil veces y calcular la frecuencia de cada n?mero de coocurrencias
table(replicate(n=100000,as.integer(t(sample(sp1))%*%sample(sp2))))
#### histograma
plot(0:6, table(replicate(n=100000,as.integer(t(sample(sp1))%*%sample(sp2)))), type="h", lwd=20, col="coral")
choose(0+6,0)*choose(14+13,14)/choose(33, 0+14)
data.frame(sp1, sp2)
t(data.frame(sp1, sp2))
table(PAM)
#### Tabla de contingencia
table(sp1, sp2)
t(data.frame(sp1, sp2))
table(data.frame(sp1, sp2))
table(data.frame(sp1, sp2))[1]
table(data.frame(sp1, sp2))[2]
table(data.frame(sp1, sp2))[3]
table(data.frame(sp1, sp2))[4]
table(data.frame(sp1, sp2))[5]
table(data.frame(sp1, sp2))[0]
table(data.frame(sp1, sp2))[9]
#### Prueba de xi cuadrada
chisq.test(sp1, sp2, correct=FALSE)                # sin correcci?n por continuidad
chisq.test(sp1, sp2, correct=TRUE)                 # con correcci?n de Yates
#### Prueba exacta de Fisher
fisher.test(sp1, sp2, alternative = "less")        # prueba exacta de Fisher
####  El n?mero de coocurrencias se puede calcular multiplicando los vectores de incidencia
as.integer(t(sp1)%*%sp2)                           #
sp1*sp2
sp1*t(sp2)
sp1
sp2
t(sp1)
t(sp1)*sp2
t(sp1)%*%sp2
t(sp1)*sp2
sample(sp1)
sample(sp1, size = length(sp1), replace=FALSE)
sample(sp1, size = length(sp1), replace=FALSE)
sample(sp1, size = length(sp1), replace=FALSE)
sample(sp1, size = length(sp1), replace=FALSE)
sample(sp1, size = length(sp1), replace=FALSE)
sample(sp1, size = length(sp1), replace=FALSE)
sample(sp1, size = length(sp1), replace=FALSE)
sample(sp1, size = length(sp1), replace=FALSE)
sample(sp1, size = length(sp1), replace=FALSE)
#### un vector aleatorios
sp1.aleatorio <- sample(sp1, size = length(sp1), replace=FALSE)  # comando completo
#### dos vectores aleatorios con los defaults y n?mero de coocurrencias:
sp1.aleatorio <- sample(sp1)
sum(sp1.aleatorio)
sum(sp1)
sp2.aleatorio <- sample(sp2)
sum(sp2.aleatorio)
sum(sp2)
lenght(sp2.aleatorio)
length(sp2.aleatorio)
length(sp1.aleatorio)
length(sp1)
?sample
sample(c(1,2,3,4,5))
sample(c(1,2,3,5,5))
sample(c(1,2,3,4,5))
sample(c(1,2,3,4,5), size=3)
sample(c(1,2,3,4,5), size=30)
sample(c(1,2,3,4,5), size=30, replace = TRUE)
sp1.aleatorio%*%sp2.aleatorio
t(sp1.aleatorio)%*%sp2.aleatorio
as.integer(t(sp1.aleatorio)%*%sp2.aleatorio)
as.integer(t(sp1.aleatorio)%*%sp2.aleatorio))
as.integer(t(sp1.aleatorio)%*%sp2.aleatorio)
(coexistencia <- as.integer(t(sp1.aleatorio)%*%sp2.aleatorio))
#####  Repetir la aleatorizaci?n
#####  con un bucle
iteraciones = 100
ocurrencias <- rep(NA, 100)
for(i in 1:iteraciones){
ocurrencias[i] = as.integer(t(sample(sp1))%*%sample(sp2))
}
ocurrencias
?replicate
##### En una sola l?nea de comando
ocurrencias <- replicate(n=100,as.integer(t(sample(sp1))%*%sample(sp2)) )
ocurrencias
####  Repetir cien mil veces y calcular la frecuencia de cada n?mero de coocurrencias
table(replicate(n=100000,as.integer(t(sample(sp1))%*%sample(sp2))))
#### histograma
plot(0:6, table(replicate(n=100000,as.integer(t(sample(sp1))%*%sample(sp2)))), type="h", lwd=20, col="coral")
a <- table(replicate(n=100000,as.integer(t(sample(sp1))%*%sample(sp2))))
a
plot(a)
axis(1)
title("x")
axis(2)
title("y")
plot(a)
a
ocurrencias
choose(1,2)
choose(2,2)
?choose
plot(a)
a
a/1000
a/10000
a/100000
choose(0+6,0)*choose(14+13,14)/choose(33, 0+14)
a/100000
plot(a/100000)
library(vegan)
library(ggplot2)
library(tidyverse)
library(ggvegan)
data("BCI")
# columnas sp (225), filas sitios (50), entradas abundancia de sp
data("BCI.env")
### dbRDA
env.habitat.hetero <- BCI.env %>%
select("Habitat","EnvHet")
env.habitat.hetero
BCI.j.dbrda <- capscale(BCI ~ ., data = env.habitat.hetero, distance = "jaccard", add=TRUE, comm = BCI)
BCI.j.dbrda
summary(BCI.j.dbrda)
BCI.j.dbrda
summary(BCI.j.dbrda)
BCI.j.dbrda$CCA$eig
BCI.j.dbrda$tot.chi
sum(BCI.j.dbrda$tot.chi)
BCI.j.dbrda$CCA$eig[1]
BCI.j.dbrda$CCA$eig[1] / BCI.j.dbrda$tot.chi
BCI.j.dbrda$CCA$eig[1] / BCI.j.dbrda$tot.chi * 100
# prueba de hipótesis
anova(BCI.j.dbrda, step=1000)
anova(BCI.j.dbrda, by="axis", step=1000)
anova(BCI.j.dbrda, by="terms", step=1000)
BCI.env
BCI.env$Habitat
BCI.env
autoplot(BCI.j.dbrda, geom="text", arrows=FALSE)
autoplot(BCI.j.dbrda, geom="text", arrows=TRUE) +
geom_hline(yintercept = 0, linetype="dashed") +
geom_vline(xintercept = 0, linetype="dashed") +
theme_minimal() +
theme(aspect.ratio=0.75, legend.position = "none") +
labs(title="dbRDA especies Barro Colorado, Panamá",
x = paste("CAP1 (", ceiling(100*BCI.j.dbrda$CCA$eig[1]/sum(BCI.j.dbrda$tot.chi)), "%)", sep=""),
y = paste("CAP2 (", ceiling(100*BCI.j.dbrda$CCA$eig[2]/sum(BCI.j.dbrda$tot.chi)), "%)", sep=""))
BCI.j.dbrda
autoplot(BCI.j.dbrda, geom="text", arrows=TRUE, label.color="BCI.env$Habitat") +
geom_hline(yintercept = 0, linetype="dashed") +
geom_vline(xintercept = 0, linetype="dashed") +
theme_minimal() +
theme(aspect.ratio=0.75, legend.position = "none") +
labs(title="dbRDA especies Barro Colorado, Panamá",
x = paste("CAP1 (", ceiling(100*BCI.j.dbrda$CCA$eig[1]/sum(BCI.j.dbrda$tot.chi)), "%)", sep=""),
y = paste("CAP2 (", ceiling(100*BCI.j.dbrda$CCA$eig[2]/sum(BCI.j.dbrda$tot.chi)), "%)", sep=""))
autoplot(BCI.j.dbrda, geom="text", arrows=TRUE) +
geom_hline(yintercept = 0, linetype="dashed") +
geom_vline(xintercept = 0, linetype="dashed") +
theme_minimal() +
theme(aspect.ratio=0.75, legend.position = "none") +
labs(title="dbRDA especies Barro Colorado, Panamá",
x = paste("CAP1 (", ceiling(100*BCI.j.dbrda$CCA$eig[1]/sum(BCI.j.dbrda$tot.chi)), "%)", sep=""),
y = paste("CAP2 (", ceiling(100*BCI.j.dbrda$CCA$eig[2]/sum(BCI.j.dbrda$tot.chi)), "%)", sep=""))
BCI.j.dbrda$CCA
summary(BCI.j.dbrda)
?capscale
BCI.j.dbrda$tot.chi
BCI.j.dbrda$Ybar
BCI.env
BCI
View(BCI)
BCI$Poulsenia.armata
BCI.env$Habitat
BCI$Gustavia.superba
data.frame(BCI.env$Habitat, BCI$Gustavia.superba)
order(data.frame(BCI.env$Habitat, BCI$Gustavia.superba))
df <- data.frame(BCI.env$Habitat, BCI$Gustavia.superba)
df[order(df$BCI.env.Habitat),]
df <- data.frame(BCI.env$Habitat, BCI$Alseis.blackiana)
df[order(df$BCI.env.Habitat),]
df <- data.frame(BCI.env$Habitat, BCI$Faramea.occidentalis )
df[order(df$BCI.env.Habitat),]
df <- data.frame(BCI.env$Habitat, BCI$Trichilia.tuberculata )
df[order(df$BCI.env.Habitat),]
df[order(df$BCI.Trichilia.tuberculata),]
df[order(df[2],]
df[2]
df[order(df[2],)
]
df[order(df[2],)]
df[order(df[2]),]
df[reverse(order(df[2])),]
df[rev(order(df[2])),]
df <- data.frame(BCI.env$Habitat, BCI$Poulsenia.armata)
df[rev(order(df[2])),]
df <- data.frame(BCI.env$Habitat, BCI$Oenocarpus.mapora)
df[rev(order(df[2])),]
df <- data.frame(BCI.env$Habitat, BCI$Faramea.occidentalis)
df[rev(order(df[2])),]
df <- data.frame(BCI.env$Habitat, BCI$Trichilia.tuberculata)
df[rev(order(df[2])),]
df <- data.frame(BCI.env$Habitat, BCI$Oenocarpus.mapora)
df[rev(order(df[2])),]
df <- data.frame(BCI.env$Habitat, BCI$Hirtella.americana)
df[rev(order(df[2])),]
df <- data.frame(BCI.env$Habitat, BCI$Hirtella.triandra)
colSums(BCI)
order(colSums(BCI))
class(colSums(BCI))
dff <- data.frame(colSums(BCI))
dff
df[rev(order(df[2])).]
df[rev(order(df[2])),]
dff <- data.frame(colSums(BCI))
dff[rev(order(dff[2])),]
dff[rev(order(dff[1])),]
dff <- data.frame(colSums(BCI))
dff
df <- data.frame(BCI.env$Habitat, BCI$Alchornea.costaricensis)
df[rev(order(df[2])),]
df <- data.frame(BCI.env$Habitat, BCI$Quararibea.asterolepis)
df[rev(order(df[2])),]
library(vegan)
library(ggplot2)
library(tidyverse)
library(ggvegan)
data("BCI")
# columnas sp (225), filas sitios (50), entradas abundancia de sp
data("BCI.env")
### PCoA
# esta matriz muestra las distancias entre sitios
BCI.jacc <- vegdist(BCI, method="jaccard")
# la tabla $ponts tiene los valores para cada cordenada (columnas)
BCI.j.pcoa <- cmdscale(BCI.jacc, k=(nrow(BCI)-1), eig=TRUE, add=TRUE)
# se preparan los datos para graficar
datFig.BCI.j.pcoa <- data.frame(BCI.j.pcoa$points) %>%
rename_with(.cols=everything(), .fn=~paste("PCoA", 1:length(.), sep = "")) %>%
rownames_to_column(var = "Sitio")
# se crea una tabla para poner los nombres de las sp
BCI.wa <- BCI.j.pcoa$points[,1:2] %>%
wascores(., BCI) %>%
data.frame(.) %>%
rename_with(.cols=everything(), .fn=~paste("PCoA", 1:length(.), sep = "")) %>%
rownames_to_column(var = "especie")
PCoAplot <- ggplot(data = datFig.BCI.j.pcoa, aes(x=PCoA1, y=PCoA2)) +
geom_text(aes(label=Sitio), color="#F8766D") +
geom_hline(yintercept = 0, linetype="dashed") +
geom_vline(xintercept = 0, linetype="dashed") +
labs(title="PCoA especies Barro Colorado, Panamá",
x = paste("PCo1 (", ceiling(100*BCI.j.pcoa$eig[1]/sum(BCI.j.pcoa$eig)), "%)", sep=""),
y = paste("PCo2 (", ceiling(100*BCI.j.pcoa$eig[2]/sum(BCI.j.pcoa$eig)), "%)", sep=""))  +
#geom_text(data = BCI.wa, mapping = aes(x=PCoA1, y=PCoA2, label=especie), color="#00BFC4") +
theme_minimal()
PCoAplot
BCI.nmds <- metaMDS(BCI, distance = "jaccard", k=2)
autoplot(BCI.nmds, geom="text") +
theme_minimal() +
geom_hline(yintercept = 0, linetype="dashed") +
geom_vline(xintercept = 0, linetype="dashed") +
labs(title="NMDS especies Barro Colorado, Panamá")
### dbRDA
env.habitat.hetero <- BCI.env %>%
select("Habitat","EnvHet")
env.habitat.hetero
BCI.j.dbrda <- capscale(BCI ~ ., data = env.habitat.hetero, distance = "jaccard", add=TRUE, comm = BCI)
BCI.j.dbrda
summary(BCI.j.dbrda)
autoplot(BCI.j.dbrda, geom="text", arrows=TRUE) +
geom_hline(yintercept = 0, linetype="dashed") +
geom_vline(xintercept = 0, linetype="dashed") +
theme_minimal() +
theme(aspect.ratio=0.75, legend.position = "none") +
labs(title="dbRDA especies Barro Colorado, Panamá",
x = paste("CAP1 (", ceiling(100*BCI.j.dbrda$CCA$eig[1]/sum(BCI.j.dbrda$tot.chi)), "%)", sep=""),
y = paste("CAP2 (", ceiling(100*BCI.j.dbrda$CCA$eig[2]/sum(BCI.j.dbrda$tot.chi)), "%)", sep=""))
# prueba de hipótesis
anova(BCI.j.dbrda, step=1000)
anova(BCI.j.dbrda, by="axis", step=1000)
# prueba de hipótesis
anova(BCI.j.dbrda, step=1000)
# prueba de hipótesis
anova(BCI.j.dbrda, step=1000)
anova(BCI.j.dbrda, by="axis", step=1000)
anova(BCI.j.dbrda, by="terms", step=1000)
anova(BCI.j.dbrda, by="margin", step=1000)
anova(BCI.j.dbrda, by="axis", step=1000)
### PAQUETES ###
library(ggpubr)
library(ggplot2)
### DATOS ###
datosNormal <- read.csv("./datos-resultados/OMYK-modelo-experiment-casos-table.csv", skip = 6)
datosAumentarTormetas <- read.csv("./datos-resultados/OMYK-modelo-experiment-aumentoOcurrHuracanes-table.csv", skip = 6)
datosAumentarIncendios <- read.csv("./datos-resultados/OMYK-modelo-experiment-aumentoProbOcurIncendios-table.csv", skip = 6)
datosDisminuirTurismo <- read.csv("./datos-resultados/OMYK-modelo-experiment-modifProbFlujoAltoTuristas-table.csv", skip = 6)
getwd()
setwd('/home/lggj/Documents/Licenciatura/OMYKmodel/results/scenario-analisys')
setwd('/home/lggj/Documents/Licenciatura/OMYKmodel/results/')
list.dirs()
setwd
setwd('/home/lggj/Documents/Licenciatura/OMYKmodel/results/scenario-analysis')
### DATOS ###
datosNormal <- read.csv("./datos-resultados/OMYK-modelo-experiment-casos-table.csv", skip = 6)
datosAumentarTormetas <- read.csv("./datos-resultados/OMYK-modelo-experiment-aumentoOcurrHuracanes-table.csv", skip = 6)
datosAumentarIncendios <- read.csv("./datos-resultados/OMYK-modelo-experiment-aumentoProbOcurIncendios-table.csv", skip = 6)
datosDisminuirTurismo <- read.csv("./datos-resultados/OMYK-modelo-experiment-modifProbFlujoAltoTuristas-table.csv", skip = 6)
datosAumentarTormetas <- datosAumentarTormetas[datosAumentarTormetas$multiplicarTormentas == 3, ]
datosAumentarIncendios <- datosAumentarIncendios[datosAumentarIncendios$multiplicarProbOcurIncendios == 3, ]
datosDisminuirTurismo <- datosDisminuirTurismo[datosDisminuirTurismo$probTuristasAltoBim == 0.3, ]
datosNormal$disturbio <- "N"
datosAumentarTormetas$disturbio <- "S" #"incremento de tormentas"
datosAumentarIncendios$disturbio <- "F" #"incremento de incendios"
datosDisminuirTurismo$disturbio <-  "T" #"disminución de turismo"
datosTotal <- rbind(datosNormal, datosAumentarTormetas, datosAumentarIncendios,datosDisminuirTurismo)
datosTotal$milpaT. <- as.factor(datosTotal$milpaT.)
datosTotal$apiculturaT. <- as.factor(datosTotal$apiculturaT.)
datosTotal$carbonT. <- as.factor(datosTotal$carbonT.)
datosTotal$turismoT. <- as.factor(datosTotal$turismoT.)
levels(datosTotal$milpaT.) <- c("-", "M")
levels(datosTotal$apiculturaT.) <- c("-", "A")
levels(datosTotal$carbonT.) <- c("-", "C")
levels(datosTotal$turismoT.) <- c("-", "T")
# Se genera una columna que describe las actividades que realiza el hogar
datosTotal$actividades <-paste(datosTotal$milpaT.,datosTotal$apiculturaT.,datosTotal$carbonT.,datosTotal$turismoT.)
## Se cambia el nombre de la columna de interés
colnames(datosTotal)[colnames(datosTotal)=="count.patches.with...edadSucesional...50.."] <- "selvaMayor50"
colnames(datosTotal)[colnames(datosTotal)=="count.monos"] <- "totalMonos"
colnames(datosTotal)[colnames(datosTotal)=="mean...mediaAnoSustento...of.hogares"] <- "mediaAnoSustento"
datosTotal$estrategia <-factor( ifelse(datosTotal$milpaT. == "M" & datosTotal$turismoT. == "-", "Tradicional",
ifelse(datosTotal$milpaT. == "M" & datosTotal$turismoT. == "T", "Mixta",
ifelse(datosTotal$milpaT. == "-" & datosTotal$turismoT. == "T", "Orientada a Servicios",
ifelse(datosTotal$milpaT. == "-" & datosTotal$turismoT. == "-", "Otra"," ")))),
levels = c("Otra", "Tradicional", "Mixta", "Orientada a Servicios"))
datosTotal$disturbio <- as.factor(datosTotal$disturbio)
#datosTotal$disturbio <- factor(datosTotal$disturbio, levels = c("normal","incremento de tormentas","incremento de incendios","disminución de turismo"))
#datosTotal$disturbio <- factor(datosTotal$disturbio, levels = c("normal","increase storms","increase forest fires","decrease tourism"))
datosTotal$disturbio <- factor(datosTotal$disturbio, levels = c("N","S","F","T"))
levels(datosTotal$estrategia) <- c("Other", "Traditional", "Mixed", "Service Oriented")
dat <- datosTotal[datosTotal$estrategia != "Other",]
dat1 <- dat[dat$X.step. == max(dat$X.step.),]
library(tidyr)
library(dplyr)
dataS <- dat1 %>% select(estrategia,disturbio,selvaMayor50,totalMonos,mediaAnoSustento)
sum <- dataS %>%
group_by(estrategia,disturbio) %>%
summarise(
n=n(),
meanF=mean(selvaMayor50),
sdF=sd(selvaMayor50),
meanM=mean(totalMonos),
sdM=sd(totalMonos),
meanVM=mean(mediaAnoSustento),
sdVM=sd(mediaAnoSustento)
) %>%
mutate(seF=sdF/sqrt(n)) %>%
mutate(seM=sdM/sqrt(n)) %>%
mutate(seVM=sdVM/sqrt(n))
plotF <- ggplot(sum,aes(x=disturbio,y=meanF,fill=estrategia)) +
geom_bar(stat="identity",position=position_dodge(),colour="black",size=0.3) +
geom_errorbar(aes(ymin=meanF-seF,ymax=meanF+seF),position = position_dodge(0.9),width=.5) +
scale_fill_brewer(palette = "Set3", name="strategy") +
ylab("Mature forest area (ha)") +
xlab("scenario")+
theme_classic()
plotF
plotM <- ggplot(sum,aes(x=disturbio,y=meanM,fill=estrategia)) +
geom_bar(stat="identity",position=position_dodge(),colour="black",size=0.3) +
geom_errorbar(aes(ymin=meanM-seM,ymax=meanM+seM),position = position_dodge(0.9),width=.5) +
scale_fill_brewer(palette = "Set3", name="strategy") +
ylab("Number of monkeys") +
xlab("scenario")+
theme_classic()
plotM
plotVM <- ggplot(dat,aes(x=disturbio,y=mediaAnoSustento,fill=estrategia)) +
geom_boxplot() +
scale_fill_brewer(palette = "Set3", name="strategy") +
ylab("Average monetary value") +
xlab("scenario")+
theme_classic()
plotVM
fig <- ggarrange(plotM, plotVM,
ncol = 3,
common.legend = TRUE,
legend = "top")
figA <- annotate_figure(fig,
bottom= text_grob("N: normal; S: increase stroms; F: increase forest fires; T: decrease tourism", size=10))
figA
fig <- ggarrange(plotM, plotVM,
ncol = 2,
common.legend = TRUE,
legend = "top")
figA <- annotate_figure(fig,
bottom= text_grob("N: normal; S: increase stroms; F: increase forest fires; T: decrease tourism", size=10))
FigA
figA
ggsave(
"./imgs/abmhub.pdf",
device = pdf,
figA,
width = 150, height = 65, units = "mm",
dpi = 72
)
ggsave(
"./imgs/abmhub.pdf",
device = pdf,
figA,
width = 140, height = 65, units = "mm",
dpi = 72
)
ggsave(
"./imgs/abmhub.pdf",
device = pdf,
figA,
width = 140, height = 75, units = "mm",
dpi = 72
)
ggsave(
"./imgs/abmhub.png",
device = png,
figA,
width = 140, height = 75, units = "mm",
dpi = 72
)
ggsave(
"./imgs/abmhub.png",
device = png,
figA,
width = 140, height = 75, units = "mm",
dpi = 300
)
ggsave(
"./imgs/abmhub.png",
device = "png",
figA,
width = 140, height = 75, units = "mm",
dpi = 300
)
fig <- ggarrange(plotF, plotM, plotVM,
ncol = 2,
common.legend = TRUE,
legend = "top")
figA <- annotate_figure(fig,
bottom= text_grob("N: normal; S: increase stroms; F: increase forest fires; T: decrease tourism", size=10))
ggsave(
"./imgs/abmhub.png",
device = "png",
figA,
width = 140, height = 75, units = "mm",
dpi = 300
)
fig <- ggarrange(plotF, plotM, plotVM,
ncol = 3,
common.legend = TRUE,
legend = "top")
figA <- annotate_figure(fig,
bottom= text_grob("N: normal; S: increase stroms; F: increase forest fires; T: decrease tourism", size=10))
ggsave(
"./imgs/abmhub.png",
device = "png",
figA,
width = 140, height = 75, units = "mm",
dpi = 300
)
